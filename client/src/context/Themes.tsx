import { createTheme, Theme, ThemeProvider } from "@mui/material";
import React, { createContext, useContext, useState } from 'react';

// This must be imported here to provide default styling for date pickers and components in mui lab. 
// See documentation: 
//  - https://mui.com/x/react-date-pickers/getting-started/
//  - https://mui.com/material-ui/about-the-lab/
import type { } from '@mui/lab/themeAugmentation';
import type { } from '@mui/x-date-pickers/themeAugmentation';


export enum ThemeName {
    Dark = "dark",
    Light = "light"
}

type AppThemeProps = {
    theme: Theme,
    name: ThemeName
}

const darkTheme: AppThemeProps = {
    name: ThemeName.Dark,
    theme: createTheme({
        palette: {
            mode: 'dark',
            primary: {
                main: "#196E45"
                // light: ""       // Autogenerated from main value   
                // dark: ""
                // contrastText: ""
            },
            secondary: {
                main: "#90CAF9"
                // main: "#90CAF9"
                // light: ""       // Autogenerated from main value   
                // dark: ""
                // contrastText: "
            },
            background: {
                default: "#0C0C0C",
                paper: "#161616"
            },
            text: {
                primary: "#FFF",
                secondary: "#EEE"
            },
            // ---------------------------------
            // Autogenerated colors:
            //      * Uncomment to override    
            //      * Default colors can be found here: https://mui.com/material-ui/customization/palette/   
            // ---------------------------------

            // primary: {          
            //     main: "",        
            //     light: "",            
            //     dark: "",
            //     contrastText: "",
            // },
            // error: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // warning: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // info: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // success: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // }
        }
    })
}

const lightTheme: AppThemeProps = {
    name: ThemeName.Light,
    theme: createTheme({
        palette: {
            mode: 'light',
            primary: {
                main: "#196E45",
                //light: "",        // Autogenerated from main value   
                //dark: "",
                //contrastText: "",
            },
            secondary: {
                main: "#1976D2"
                //light: "",        // Autogenerated from main value   
                //dark: "",
                //contrastText: "",
            },
            background: {
                default: "#E5E5E5",
                paper: "#F8F8F8"
            },
            text: {
                primary: "#000",
                secondary: "#252525"
            },

            // ---------------------------------
            // Autogenerated colors:
            //      * Uncomment to override 
            //      * Default colors can be found here: https://mui.com/material-ui/customization/palette/   
            // ---------------------------------

            // primary: {           
            //     main: "",        
            //     light: "",            
            //     dark: "",
            //     contrastText: "",
            // },
            // error: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // warning: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // info: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // success: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // }
        },
    })
}

function osPreferDarkMode(): boolean {
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
}

function objectToTheme(name: string | ThemeName | null | undefined): AppThemeProps {
    switch (name?.trim().toLowerCase()) {
        case ThemeName.Light: 
            return lightTheme
        case ThemeName.Dark: 
            return darkTheme
        default: 
            return osPreferDarkMode() ? darkTheme : lightTheme
    }
}

const themeStorageKey = "AppTheme"

function getDefaultTheme(): AppThemeProps {
    const storedData = localStorage.getItem(themeStorageKey)
    const theme = objectToTheme(storedData)
    return theme;
}

function setDefaultTheme(theme: AppThemeProps) {
    localStorage.setItem(themeStorageKey, theme.name)
}

interface AppThemeContextProps extends AppThemeProps {
    toggleTheme: VoidFunction
    isDarkMode: boolean,    
}

export const AppThemeContext = createContext<AppThemeContextProps>(null!)

export function useAppTheme() {
    return useContext(AppThemeContext)
}

export function AppThemeProvider({ children }: { children: React.ReactNode }) {

    const [themeInfo, setTheme] = useState<AppThemeProps>(getDefaultTheme())

    const isDarkMode = () => themeInfo.name === ThemeName.Dark;

    const toggleTheme = () => {
        const newTheme = isDarkMode() ? ThemeName.Light : ThemeName.Dark;
        const newThemeInfo = objectToTheme(newTheme)

        setTheme(newThemeInfo)
        setDefaultTheme(newThemeInfo)
    }

    const contextValue: AppThemeContextProps = { 
        ...themeInfo, 
        toggleTheme: toggleTheme,
        isDarkMode: isDarkMode()
    }

    return (
        <AppThemeContext.Provider value={contextValue}>
            <ThemeProvider theme={themeInfo.theme}>
                {children}
            </ThemeProvider>
        </AppThemeContext.Provider>
    )
}