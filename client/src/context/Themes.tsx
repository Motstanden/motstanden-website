import { createTheme, Theme, ThemeProvider, useMediaQuery } from "@mui/material";
import React, { createContext, useContext, useState } from 'react';

// This must be imported here to provide default styling for date pickers and components in mui lab. 
// See documentation: 
//  - https://mui.com/x/react-date-pickers/getting-started/
//  - https://mui.com/material-ui/about-the-lab/
import type { } from '@mui/lab/themeAugmentation';
import type { } from '@mui/x-date-pickers/themeAugmentation';


export enum ThemeName {
    Dark = "dark",
    Light = "light"
}

export enum ThemeMode {
    Dark = ThemeName.Dark,
    Light = ThemeName.Light,
    System = "system"
}

type AppThemeProps = {
    theme: Theme,
    name: ThemeName
}

const darkTheme: AppThemeProps = {
    name: ThemeName.Dark,
    theme: createTheme({
        palette: {
            mode: 'dark',
            primary: {
                main: "#196E45"
                // light: ""       // Autogenerated from main value   
                // dark: ""
                // contrastText: ""
            },
            secondary: {
                main: "#90CAF9"
                // main: "#90CAF9"
                // light: ""       // Autogenerated from main value   
                // dark: ""
                // contrastText: "
            },
            background: {
                default: "#1A1A1A",
                paper: "#212121"
            },
            text: {
                primary: "#F0F0F0",
                secondary: "#E0E0E0"
            },
            // ---------------------------------
            // Autogenerated colors:
            //      * Uncomment to override    
            //      * Default colors can be found here: https://mui.com/material-ui/customization/palette/   
            // ---------------------------------

            // primary: {          
            //     main: "",        
            //     light: "",            
            //     dark: "",
            //     contrastText: "",
            // },
            // error: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // warning: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // info: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // success: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // }
        }
    })
}

const lightTheme: AppThemeProps = {
    name: ThemeName.Light,
    theme: createTheme({
        palette: {
            mode: 'light',
            primary: {
                main: "#196E45",
                //light: "",        // Autogenerated from main value   
                //dark: "",
                //contrastText: "",
            },
            secondary: {
                main: "#1976D2"
                //light: "",        // Autogenerated from main value   
                //dark: "",
                //contrastText: "",
            },
            background: {
                default: "#F5F6F5",
                paper: "#F9F9F9"
            },
            text: {
                primary: "#202020",
                secondary: "#303030"
            },
            action: {
                hover: "#C3C3C377"
            }
            // ---------------------------------
            // Autogenerated colors:
            //      * Uncomment to override 
            //      * Default colors can be found here: https://mui.com/material-ui/customization/palette/   
            // ---------------------------------

            // primary: {           
            //     main: "",        
            //     light: "",            
            //     dark: "",
            //     contrastText: "",
            // },
            // error: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // warning: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // info: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // },
            // success: {
            //     main: "",
            //     light: "",
            //     dark: "",
            //     contrastText: "",
            // }
        },
    })
}

function osPreferDarkMode(): boolean {
    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
}

function getTheme(name: ThemeMode ): AppThemeProps {
    switch (name?.trim().toLowerCase()) {
        case ThemeName.Light: 
            return lightTheme
        case ThemeName.Dark: 
            return darkTheme
        case ThemeMode.System:
            return osPreferDarkMode() ? darkTheme : lightTheme
        default: 
            throw `Invalid theme mode: ${name}`
    }
}

const themeStorageKey = "AppTheme"

function getDefaultMode(): ThemeMode {
    const storedData = localStorage.getItem(themeStorageKey)
    const isValid = storedData && storedData in ThemeMode
    
    if(!isValid) 
        return ThemeMode.System

    return storedData as ThemeMode
}

function setDefaultMode(mode: ThemeMode) {
    localStorage.setItem(themeStorageKey, mode)
}

interface AppThemeContextProps extends AppThemeProps {
    setMode: (mode: ThemeMode) => void,
    mode: ThemeMode
    isDarkMode: boolean
}

export const AppThemeContext = createContext<AppThemeContextProps>(null!)

export function useAppTheme() {
    return useContext(AppThemeContext)
}

export function AppThemeProvider({ children }: { children: React.ReactNode }) {
    const [mode, setMode] = useState<ThemeMode>(getDefaultMode())
    
    useMediaQuery('(prefers-color-scheme: dark)');  // Trigges a rerender when the OS theme changes

    const onModeChange = (newMode: ThemeMode) => { 
        setMode(newMode)
        setDefaultMode(newMode)
    }
    
    const themeInfo = getTheme(mode)

    const contextValue: AppThemeContextProps = { 
        ...themeInfo,
        mode: mode,
        setMode: onModeChange,
        isDarkMode: themeInfo.name === ThemeName.Dark
    }

    return (
        <AppThemeContext.Provider value={contextValue}>
            <ThemeProvider theme={themeInfo.theme}>
                {children}
            </ThemeProvider>
        </AppThemeContext.Provider>
    )
}